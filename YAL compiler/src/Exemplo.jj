options
{
  LOOKAHEAD= 1;
}

PARSER_BEGIN(Exemplo)
import java.io.FileInputStream;
import java.io.IOException;

//código Java que invoca o parser 
public class Exemplo
{
  public static void main(String args []) throws ParseException, IOException
  {
    //criação do objecto utilizando o constructor com argumento para 
    //ler do standard input (teclado) 
    Exemplo parser = new Exemplo(new FileInputStream("src/test.yal"));
    parser.Module();
    //Scanner TokenManager;
  }
}

PARSER_END(Exemplo)

// definição dos tokens (símbolos terminais) 
< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

//Non-terminals
/* Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA> */
void Module() :
{}
{
  try
  {
    < MODULE > < ID > < LCHAVETA > (Declaration()) * (Function()) * < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]" ) | (<ADDSUB_OP> )? <INTEGER> ) )? <PVIRG> */
void Declaration() :
{}
{
  try
  {
    (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) (< ASSIGN > (("[" ArraySize() "]")
  | (< ADDSUB_OP >) ? < INTEGER >)) ? < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> (Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) )<LCHAVETA> Stmtlst <RCHAVETA> */
void Function() :
{}
{
  try
  {
    (LOOKAHEAD(3)
    (< FUNCTION > (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) < ASSIGN > < ID > < LPAR > (Varlist()) ? < RPAR >)
  | (< FUNCTION > < ID > < LPAR > (Varlist()) ? < RPAR >)) < LCHAVETA > Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ))* */
void Varlist() :
{}
{
  try
  {
    (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) (< VIRG > < ID > (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement())) *
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* ArrayElement ::= <ID> "[" "]" */
void ArrayElement() :
{}
{
  try
  {
    < ID > "[" "]"
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/*ScalarElement ::= <ID>*/
void ScalarElement() :
{}
{
  try
  {
    < ID >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Stmtlst ::= ( Stmt )* */
void Stmtlst() :
{}
{
  try
  {
    (Stmt()) *
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Stmt ::= While | If | Assign | Call <PVIRG> */
void Stmt() :
{}
{
  try
  {
    While()
  | If()
  | LOOKAHEAD(3)
    Assign()
  | Call() < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Assign ::= Lhs <ASSIGN> Rhs <PVIRG> */
void Assign() :
{}
{
    try
  {
   Lhs() < ASSIGN > Rhs() < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Lhs ::= ArrayAccess | ScalarAccess */
void Lhs() :
{}
{
      try
  {
     LOOKAHEAD(2)
  ArrayAccess()
| ScalarAccess()
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" */
void Rhs() :
{}
{
        try
  {
   (
    Term()
    (
      (
        < ARITH_OP >
      | < BITWISE_OP >
      | < ADDSUB_OP >
      )
      Term()
    )?
  )
| "[" ArraySize() "]"
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* ArraySize ::= ScalarAccess | <INTEGER> */
void ArraySize() :
{}
{
      try
  {
  	  ScalarAccess()
| < INTEGER >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess ) */
void Term() :
{}
 {
       try
      { 
  (< ADDSUB_OP >)?
  (
    < INTEGER >
  | LOOKAHEAD(3)
    Call()
  | LOOKAHEAD(2)
    ArrayAccess()
  | ScalarAccess()
  )
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}


/* Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR> */
void Exprtest() :
{}
{
         try
  {
  	< LPAR > Lhs() < RELA_OP > Rhs() < RPAR >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/*While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> */
void While() throws ParseException :
{}
{
           try
  {
  	  < WHILE > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/*If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )? */
void If() :
{}
{
             try
  {
  	 < IF > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
  (
    < ELSE > < LCHAVETA > Stmtlst() < RCHAVETA >
  )?
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/*Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR> */
void Call() :
{}
{
               try
  {
  	  < ID > ("." < ID >)? < LPAR >
  (
    ArgumentList()
  )?
  < RPAR >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* ArgumentList ::= Argument ( <VIRG> Argument )* */
void ArgumentList() :
{}
{
                 try
  {
    Argument()
  (
    < VIRG > Argument()
  )*
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Argument ::= ( <ID> | <STRING> | <INTEGER> ) */
void Argument() :
{}
{
                  try
  {
    (
    < ID >
  | < STRING >
  | < INTEGER >	
  )
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* ArrayAccess ::= <ID> "[" Index "]"*/
void ArrayAccess() :
{}
{
                    try
  {
  < ID > "[" Index() "]"
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* ScalarAccess ::= <ID> ( "." <SIZE> )? */
void ScalarAccess() :
{}
{
                      try
  {
    < ID > ("." < SIZE >)?
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/*Index ::= <ID> | <INTEGER>*/
void Index() :
{}
{
                        try
  {
      < ID >
| < INTEGER >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}
