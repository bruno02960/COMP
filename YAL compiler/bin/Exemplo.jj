/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Exemplo.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;

}

PARSER_BEGIN(Exemplo)
import java.io.FileInputStream;
import java.io.IOException;

//c\u00f3digo Java que invoca o parser 
public class Exemplo/*@bgen(jjtree)*/implements ExemploTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTExemploState jjtree = new JJTExemploState();

/*@egen*/
  public static void main(String args []) throws ParseException, IOException
  {
    //cria\u00e7\u00e3o do objecto
    Exemplo parser = new Exemplo(new FileInputStream("src/test.yal"));
    SimpleNode root = parser.Module();
    root.dump("");
  }
}

PARSER_END(Exemplo)

// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais) 
< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
| < LPARRETO : "[" >
| < RPARRETO : "]" >
| < PONTO : "." >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

//Non-terminals
/* Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA> */
SimpleNode Module()         :
{/*@bgen(jjtree) MODULE */
 SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MODULE */
  try {
/*@egen*/
  try
  {
    t = < MODULE >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (Declaration()) * (Function()) * t = < RCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Declaration ::= 	( ArrayElement | ScalarElement )
					(
					  		<ASSIGN>
							( 	( "[" ArraySize "]" )
							| (<ADDSUB_OP> )? <INTEGER> )
															)? <PVIRG> */
void Declaration()                :
{/*@bgen(jjtree) #DECLARATION(true) */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #DECLARATION(true) */
  try {
/*@egen*/
  try
  {
    (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) (t = < ASSIGN >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    ((t = < LPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } ArraySize() t = < RPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    })
  | (t = < ADDSUB_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }) ? t = < INTEGER >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    })) ? t = < PVIRG >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> (Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) )<LCHAVETA> Stmtlst <RCHAVETA> */
void Function()           :
{/*@bgen(jjtree) FUNCTION */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FUNCTION */
  try {
/*@egen*/
  try
  {
    (LOOKAHEAD(3)
    (t = < FUNCTION >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) t = < ASSIGN >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (Varlist()) ? t = < RPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    })
  | (t = < FUNCTION >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (Varlist()) ? t = < RPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    })) t = < LCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Stmtlst() t = < RCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ))* */
void Varlist()          :
{/*@bgen(jjtree) VARLIST */
 SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VARLIST */
  try {
/*@egen*/
  try
  {
    (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) (t = < VIRG >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement())) *
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArrayElement ::= <ID> "[" "]" */
void ArrayElement()               :
{/*@bgen(jjtree) ARRAYELEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARRAYELEMENT */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < RPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*ScalarElement ::= <ID>*/
void ScalarElement()                :
{/*@bgen(jjtree) SCALARELEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SCALARELEMENT */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != ID);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Stmtlst ::= ( Stmt )* */
void Stmtlst()       :
{}
{
  try
  {
    (Stmt()) *
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Stmt ::= While | If | Assign | Call <PVIRG> */
void Stmt()       :
{/*@bgen(jjtree) STMT */
 SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) STMT */
  try {
/*@egen*/
  try
  {
    While()
  | If()
  | LOOKAHEAD(3)
    Assign()
  | Call() t = < PVIRG >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Assign ::= Lhs <ASSIGN> Rhs <PVIRG> */
void Assign()         :
{/*@bgen(jjtree) ASSIGN */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ASSIGN */
  try {
/*@egen*/
  try
  {
    Lhs() t = < ASSIGN >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Rhs() t = < PVIRG >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Lhs ::= ArrayAccess | ScalarAccess */
void Lhs()       :
{}
{
  try
  {
    LOOKAHEAD(2)
    ArrayAccess()
  | ScalarAccess()
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t;
    do
    {
      t = getNextToken();
    }
    while (t.kind != PVIRG);
  }
}

/* Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" */
void Rhs()      :
{/*@bgen(jjtree) RHS */
  SimpleNode jjtn000 = new SimpleNode(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) RHS */
  try {
/*@egen*/
  try
  {
    (
    Term() 
    (
    (
    t = < ARITH_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | t = < BITWISE_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | t = < ADDSUB_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    ) 
    Term()
    ) ?
    )
  | t = < LPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } ArraySize() t = < RPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArraySize ::= ScalarAccess | <INTEGER> */
void ArraySize()            :
{/*@bgen(jjtree) ARRAYSIZE */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARRAYSIZE */
  try {
/*@egen*/
  try
  {
    ScalarAccess()
  | t = < INTEGER >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess ) */
void Term()       :
{/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) TERM */
  try {
/*@egen*/
  try
  {
    (t = < ADDSUB_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    ) ? 
    (
    t = < INTEGER >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | LOOKAHEAD(3)
    Call()
  | LOOKAHEAD(2)
    ArrayAccess()
  | ScalarAccess()
    )
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR> */
void Exprtest()           :
{/*@bgen(jjtree) EXPRTEST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) EXPRTEST */
  try {
/*@egen*/
  try
  {
    t = < LPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Lhs() t = < RELA_OP >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Rhs() t = < RPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> */
void While()        :
{/*@bgen(jjtree) WHILE */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) WHILE */
  try {
/*@egen*/
  try
  {
    t = < WHILE >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Exprtest() t = < LCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Stmtlst() t = < RCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )? */
void If()     :
{/*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  try
  {
    t = < IF >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Exprtest() t = < LCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Stmtlst() t = < RCHAVETA > 
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    (
    t = < ELSE >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Stmtlst() t = < RCHAVETA >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    ) ?
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR> */
void Call()       :
{/*@bgen(jjtree) CALL */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) CALL */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (t = < PONTO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }) ? t = < LPAR > 
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    (
    ArgumentList()
    ) ? 
    t = < RPAR >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArgumentList ::= Argument ( <VIRG> Argument )* */
void ArgumentList()               :
{/*@bgen(jjtree) ARGUMENTLIST */
 SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ARGUMENTLIST */
  try {
/*@egen*/
  try
  {
    Argument() 
    (
    t = < VIRG >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Argument()
    ) *
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Argument ::= ( <ID> | <STRING> | <INTEGER> ) */
void Argument()           :
{/*@bgen(jjtree) ARGUMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARGUMENT */
  try {
/*@egen*/
  try
  {
    (
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | t = < STRING >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | t = < INTEGER >	
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
    )
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArrayAccess ::= <ID> "[" Index "]"*/
void ArrayAccess()              :
{/*@bgen(jjtree) ARRAYACCESS */
 SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ARRAYACCESS */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < LPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } Index() t = < RPARRETO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ScalarAccess ::= <ID> ( "." <SIZE> )? */
void ScalarAccess()               :
{/*@bgen(jjtree) SCALARACCESS */
  SimpleNode jjtn000 = new SimpleNode(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SCALARACCESS */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } (t = < PONTO >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    } t = < SIZE >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }) ?
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*Index ::= <ID> | <INTEGER>*/
void Index()        :
{/*@bgen(jjtree) INDEX */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) INDEX */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  | t = < INTEGER >
    {
      if(jjtn000.value != "")   jjtn000.value += " " + t.image;   else   jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
