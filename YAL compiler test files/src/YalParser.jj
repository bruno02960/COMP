/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. YalParser.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;
               
  STATIC = false;
}

PARSER_BEGIN(YalParser)
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;


public class YalParser/*@bgen(jjtree)*/implements YalParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTYalParserState jjtree = new JJTYalParserState();

/*@egen*/
  public static void main(String args []) throws ParseException, IOException
  {
  File folder = new File("src\\MyFirstYalExamples_err");

   ArrayList<String> listFileNames = listFilesForFolder(folder);
   for(int i = 0; i < listFileNames.size(); i++)
   {
    if(listFileNames.get(i).contains(".yal") )
    {
     System.out.println(listFileNames.get(i) + "###########\n\n");
     SimpleNode root = new YalParser(new FileInputStream("src\\MyFirstYalExamples_err\\" + listFileNames.get(i))).Module();
		root.dump("");

    }
   }

  }

   public static ArrayList<String> listFilesForFolder(final File folder)
 {
  ArrayList<String> list = new ArrayList<String>();
     for (final File fileEntry : folder.listFiles())
     {
         if (fileEntry.isDirectory())
             list.addAll(listFilesForFolder(fileEntry));
         else
          list.add(fileEntry.getName());
     }
  return list;
  }
}

PARSER_END(YalParser)

// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais) 
< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
| < LPARRETO : "[" >
| < RPARRETO : "]" >
| < PONTO : "." >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

//Non-terminals
/* Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA> */
SimpleNode Module()         :
{/*@bgen(jjtree) MODULE */
  ASTMODULE jjtn000 = new ASTMODULE(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MODULE */
  try {
/*@egen*/
  try
  {
    < MODULE > t = < ID >
    {
      jjtn000.name = t.image;
    }
    < LCHAVETA > (Declaration()) * (Function()) * < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Declaration ::= 	( ArrayElement | ScalarElement )
					(
					  		<ASSIGN>
							( 	( "[" ArraySize "]" )
							| (<ADDSUB_OP> )? <INTEGER> )
															)? <PVIRG> */
void Declaration()              :
{/*@bgen(jjtree) DECLARATION */
  ASTDECLARATION jjtn000 = new ASTDECLARATION(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) DECLARATION */
  try {
/*@egen*/
  try
  {
    (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) (< ASSIGN >
    ((< LPARRETO > 
    ArraySize() < RPARRETO >)
  | (t = < ADDSUB_OP >
    {
      if (jjtn000.operator != "")
      	jjtn000.operator += " " + t.image;
      else
      	jjtn000.operator += t.image;
    }
    ) ? t = < INTEGER >
    {
		jjtn000.integer = new Integer(t.image);
    }
    )) ? < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> (Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) )<LCHAVETA> Stmtlst <RCHAVETA> */
void Function()           :
{/*@bgen(jjtree) FUNCTION */
  ASTFUNCTION jjtn000 = new ASTFUNCTION(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) FUNCTION */
  try {
/*@egen*/
  try
  {
    (LOOKAHEAD(3)
    (< FUNCTION > (LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()) < ASSIGN > t = < ID >
    {
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
    }
    < LPAR > (Varlist()) ? < RPAR >)
  | (< FUNCTION > t = < ID >
    {
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
    }
    < LPAR > (Varlist()) ? < RPAR >)) < LCHAVETA > Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ))* */
void Varlist()       :
{}
{
  (
    LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()
  )
  (
    < VIRG >
    (
      LOOKAHEAD(2)
      ArrayElement()
    | ScalarElement()
    )
  )*
}

/* ArrayElement ::= <ID> "[" "]" */
void ArrayElement()               :
{/*@bgen(jjtree) ARRAYELEMENT */
  ASTARRAYELEMENT jjtn000 = new ASTARRAYELEMENT(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARRAYELEMENT */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
    }
    < LPARRETO > < RPARRETO >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*ScalarElement ::= <ID>*/
void ScalarElement()                :
{/*@bgen(jjtree) SCALARELEMENT */
  ASTSCALARELEMENT jjtn000 = new ASTSCALARELEMENT(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SCALARELEMENT */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != ID);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Stmtlst ::= ( Stmt )* */
void Stmtlst()       :
{}
{
  (
    Stmt()
  )*
}

/* Stmt ::= While | If | Assign | Call <PVIRG> */
void Stmt()       :
{}
{
  try
  {
    While()
  | If()
  | LOOKAHEAD(3)
    Assign()
  | Call() < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }
}

/* Assign ::= Lhs <ASSIGN> Rhs <PVIRG> */
void Assign()       :
{}
{
  try
  {
    Lhs() < ASSIGN > Rhs() < PVIRG >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
  }
}

/* Lhs ::= ArrayAccess | ScalarAccess */
void Lhs()       :
{}
{
  LOOKAHEAD(2)
  ArrayAccess()
| ScalarAccess()
}

/* Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" */
void Rhs()      :
{/*@bgen(jjtree) RHS */
  ASTRHS jjtn000 = new ASTRHS(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) RHS */
  try {
/*@egen*/
  try
  {
    (
    Term() 
    (
    (
    t = < ARITH_OP >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  | t = < BITWISE_OP >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  | t = < ADDSUB_OP >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
    ) 
    Term()
    ) ?
    )
  | < LPARRETO > ArraySize() < RPARRETO >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArraySize ::= ScalarAccess | <INTEGER> */
void ArraySize()            :
{/*@bgen(jjtree) ARRAYSIZE */
  ASTARRAYSIZE jjtn000 = new ASTARRAYSIZE(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARRAYSIZE */
  try {
/*@egen*/
  ScalarAccess()
| t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess ) */
void Term()       :
{/*@bgen(jjtree) TERM */
  ASTTERM jjtn000 = new ASTTERM(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) TERM */
  try {
/*@egen*/
  (
    t = < ADDSUB_OP >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  )?
  (
    t = < INTEGER >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  | LOOKAHEAD(3)
    Call()
  | LOOKAHEAD(2)
    ArrayAccess()
  | ScalarAccess()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR> */
void Exprtest()           :
{/*@bgen(jjtree) EXPRTEST */
  ASTEXPRTEST jjtn000 = new ASTEXPRTEST(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) EXPRTEST */
  try {
/*@egen*/
  try
  {
    < LPAR > Lhs() t = < RELA_OP >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
    Rhs() < RPAR >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> */
void While()        :
{/*@bgen(jjtree) WHILE */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE */
  try {
/*@egen*/
  try
  {
    < WHILE > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )? */
void If()     :
{/*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
  try {
/*@egen*/
  try
  {
    < IF > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA > 
    (
    < ELSE > < LCHAVETA > Stmtlst() < RCHAVETA >
    ) ?
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR> */
void Call()       :
{/*@bgen(jjtree) CALL */
  ASTCALL jjtn000 = new ASTCALL(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) CALL */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      jjtn000.value = t.image;
    }
    (< PONTO >
    {
      jjtn000.value += ".";
    }
    t = < ID >
    {
      jjtn000.value += t.image;
    }
    ) ? < LPAR > 
    (
    ArgumentList()
    ) ? 
    < RPAR >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArgumentList ::= Argument ( <VIRG> Argument )* */
void ArgumentList()       :
{}
{
  Argument()
  (
    < VIRG > Argument()
  )*
}

/* Argument ::= ( <ID> | <STRING> | <INTEGER> ) */
void Argument()           :
{/*@bgen(jjtree) ARGUMENT */
  ASTARGUMENT jjtn000 = new ASTARGUMENT(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARGUMENT */
  try {
/*@egen*/
  (
    t = < ID >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  | t = < STRING >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  | t = < INTEGER >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/	
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ArrayAccess ::= <ID> "[" Index "]"*/
void ArrayAccess()              :
{/*@bgen(jjtree) ARRAYACCESS */
  ASTARRAYACCESS jjtn000 = new ASTARRAYACCESS(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ARRAYACCESS */
  try {
/*@egen*/
  try
  {
    t = < ID >
    {
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
    }
    < LPARRETO > Index() < RPARRETO >
  }
  catch (ParseException e)
  {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ScalarAccess ::= <ID> ( "." <SIZE> )? */
void ScalarAccess()               :
{/*@bgen(jjtree) SCALARACCESS */
  ASTSCALARACCESS jjtn000 = new ASTSCALARACCESS(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SCALARACCESS */
  try {
/*@egen*/
  t = < ID >
  {
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
  }
  (< PONTO > < SIZE >)?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*Index ::= <ID> | <INTEGER>*/
void Index()        :
{/*@bgen(jjtree) INDEX */
  ASTINDEX jjtn000 = new ASTINDEX(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) INDEX */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
  }
| t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
