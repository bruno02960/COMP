/* Generated By:JJTree&JavaCC: Do not edit this line. YalParser.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;


public class YalParser/*@bgen(jjtree)*/implements YalParserTreeConstants, YalParserConstants {/*@bgen(jjtree)*/
  protected JJTYalParserState jjtree = new JJTYalParserState();public static void main(String args []) throws ParseException, IOException
  {
  File folder = new File("src\u005c\u005cMyFirstYalExamples_err");

   ArrayList<String> listFileNames = listFilesForFolder(folder);
   for(int i = 0; i < listFileNames.size(); i++)
   {
    if(listFileNames.get(i).contains(".yal") )
    {
     System.out.println(listFileNames.get(i) + "###########\u005cn\u005cn");
     SimpleNode root = new YalParser(new FileInputStream("src\u005c\u005cMyFirstYalExamples_err\u005c\u005c" + listFileNames.get(i))).Module();
                root.dump("");

    }
   }

  }

   public static ArrayList<String> listFilesForFolder(final File folder)
 {
  ArrayList<String> list = new ArrayList<String>();
     for (final File fileEntry : folder.listFiles())
     {
         if (fileEntry.isDirectory())
             list.addAll(listFilesForFolder(fileEntry));
         else
          list.add(fileEntry.getName());
     }
  return list;
  }

//Non-terminals
/* Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA> */
  final public SimpleNode Module() throws ParseException {
 /*@bgen(jjtree) MODULE */
  ASTMODULE jjtn000 = new ASTMODULE(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(MODULE);
        t = jj_consume_token(ID);
      jjtn000.name = t.image;
        jj_consume_token(LCHAVETA);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Declaration();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          Function();
        }
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* Declaration ::= 	( ArrayElement | ScalarElement )
					(
					  		<ASSIGN>
							( 	( "[" ArraySize "]" )
							| (<ADDSUB_OP> )? <INTEGER> )
															)? <PVIRG> */
  final public void Declaration() throws ParseException {
 /*@bgen(jjtree) DECLARATION */
  ASTDECLARATION jjtn000 = new ASTDECLARATION(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        if (jj_2_1(2)) {
          ArrayElement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ScalarElement();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPARRETO:
            jj_consume_token(LPARRETO);
            ArraySize();
            jj_consume_token(RPARRETO);
            break;
          case ADDSUB_OP:
          case INTEGER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADDSUB_OP:
              t = jj_consume_token(ADDSUB_OP);
      if (jjtn000.operator != "")
        jjtn000.operator += " " + t.image;
      else
        jjtn000.operator += t.image;
              break;
            default:
              jj_la1[3] = jj_gen;
              ;
            }
            t = jj_consume_token(INTEGER);
                jjtn000.integer = new Integer(t.image);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> (Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) )<LCHAVETA> Stmtlst <RCHAVETA> */
  final public void Function() throws ParseException {
 /*@bgen(jjtree) FUNCTION */
  ASTFUNCTION jjtn000 = new ASTFUNCTION(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        if (jj_2_3(3)) {
          jj_consume_token(FUNCTION);
          if (jj_2_2(2)) {
            ArrayElement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              ScalarElement();
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(ASSIGN);
          t = jj_consume_token(ID);
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Varlist();
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
            jj_consume_token(FUNCTION);
            t = jj_consume_token(ID);
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
            jj_consume_token(LPAR);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              Varlist();
              break;
            default:
              jj_la1[8] = jj_gen;
              ;
            }
            jj_consume_token(RPAR);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ))* */
  final public void Varlist() throws ParseException {
    if (jj_2_4(2)) {
      ArrayElement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ScalarElement();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      if (jj_2_5(2)) {
        ArrayElement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ScalarElement();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* ArrayElement ::= <ID> "[" "]" */
  final public void ArrayElement() throws ParseException {
 /*@bgen(jjtree) ARRAYELEMENT */
  ASTARRAYELEMENT jjtn000 = new ASTARRAYELEMENT(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(ID);
      if (jjtn000.id != "") jjtn000.id += " " + t.image;
      else jjtn000.id += t.image;
        jj_consume_token(LPARRETO);
        jj_consume_token(RPARRETO);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*ScalarElement ::= <ID>*/
  final public void ScalarElement() throws ParseException {
 /*@bgen(jjtree) SCALARELEMENT */
  ASTSCALARELEMENT jjtn000 = new ASTSCALARELEMENT(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(ID);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != ID);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Stmtlst ::= ( Stmt )* */
  final public void Stmtlst() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      Stmt();
    }
  }

/* Stmt ::= While | If | Assign | Call <PVIRG> */
  final public void Stmt() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        While();
        break;
      case IF:
        If();
        break;
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_6(3)) {
          Assign();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Call();
            jj_consume_token(PVIRG);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
    }
  }

/* Assign ::= Lhs <ASSIGN> Rhs <PVIRG> */
  final public void Assign() throws ParseException {
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(PVIRG);
    } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != PVIRG);
    }
  }

/* Lhs ::= ArrayAccess | ScalarAccess */
  final public void Lhs() throws ParseException {
    if (jj_2_7(2)) {
      ArrayAccess();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ScalarAccess();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" */
  final public void Rhs() throws ParseException {
 /*@bgen(jjtree) RHS */
  ASTRHS jjtn000 = new ASTRHS(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case INTEGER:
        case ID:
          Term();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADDSUB_OP:
          case ARITH_OP:
          case BITWISE_OP:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ARITH_OP:
              t = jj_consume_token(ARITH_OP);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
              break;
            case BITWISE_OP:
              t = jj_consume_token(BITWISE_OP);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
              break;
            case ADDSUB_OP:
              t = jj_consume_token(ADDSUB_OP);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Term();
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          break;
        case LPARRETO:
          jj_consume_token(LPARRETO);
          ArraySize();
          jj_consume_token(RPARRETO);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ArraySize ::= ScalarAccess | <INTEGER> */
  final public void ArraySize() throws ParseException {
 /*@bgen(jjtree) ARRAYSIZE */
  ASTARRAYSIZE jjtn000 = new ASTARRAYSIZE(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ScalarAccess();
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess ) */
  final public void Term() throws ParseException {
 /*@bgen(jjtree) TERM */
  ASTTERM jjtn000 = new ASTTERM(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t = jj_consume_token(ADDSUB_OP);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        break;
      default:
        jj_la1[22] = jj_gen;
        if (jj_2_8(3)) {
          Call();
        } else if (jj_2_9(2)) {
          ArrayAccess();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ScalarAccess();
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR> */
  final public void Exprtest() throws ParseException {
 /*@bgen(jjtree) EXPRTEST */
  ASTEXPRTEST jjtn000 = new ASTEXPRTEST(JJTEXPRTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(LPAR);
        Lhs();
        t = jj_consume_token(RELA_OP);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        Rhs();
        jj_consume_token(RPAR);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> */
  final public void While() throws ParseException {
 /*@bgen(jjtree) WHILE */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        Exprtest();
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )? */
  final public void If() throws ParseException {
 /*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IF);
        Exprtest();
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(LCHAVETA);
          Stmtlst();
          jj_consume_token(RCHAVETA);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RCHAVETA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR> */
  final public void Call() throws ParseException {
 /*@bgen(jjtree) CALL */
  ASTCALL jjtn000 = new ASTCALL(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(ID);
      jjtn000.value = t.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PONTO:
          jj_consume_token(PONTO);
      jjtn000.value += ".";
          t = jj_consume_token(ID);
      jjtn000.value += t.image;
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          ArgumentList();
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPAR);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ArgumentList ::= Argument ( <VIRG> Argument )* */
  final public void ArgumentList() throws ParseException {
    Argument();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRG);
      Argument();
    }
  }

/* Argument ::= ( <ID> | <STRING> | <INTEGER> ) */
  final public void Argument() throws ParseException {
 /*@bgen(jjtree) ARGUMENT */
  ASTARGUMENT jjtn000 = new ASTARGUMENT(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        break;
      case STRING:
        t = jj_consume_token(STRING);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ArrayAccess ::= <ID> "[" Index "]"*/
  final public void ArrayAccess() throws ParseException {
 /*@bgen(jjtree) ARRAYACCESS */
  ASTARRAYACCESS jjtn000 = new ASTARRAYACCESS(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        t = jj_consume_token(ID);
      if (jjtn000.value != "") jjtn000.value += " " + t.image;
      else jjtn000.value += t.image;
        jj_consume_token(LPARRETO);
        Index();
        jj_consume_token(RPARRETO);
      } catch (ParseException e) {
    System.out.println(e.toString());
    Token t2;
    do
    {
      t2 = getNextToken();
    }
    while (t2.kind != RPARRETO);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ScalarAccess ::= <ID> ( "." <SIZE> )? */
  final public void ScalarAccess() throws ParseException {
 /*@bgen(jjtree) SCALARACCESS */
  ASTSCALARACCESS jjtn000 = new ASTSCALARACCESS(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO:
        jj_consume_token(PONTO);
        jj_consume_token(SIZE);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*Index ::= <ID> | <INTEGER>*/
  final public void Index() throws ParseException {
 /*@bgen(jjtree) INDEX */
  ASTINDEX jjtn000 = new ASTINDEX(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (jjtn000.value != "") jjtn000.value += " " + t.image;
    else jjtn000.value += t.image;
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARRETO)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARRETO)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(LPARRETO)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public YalParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x800000,0x40000000,0x100,0x24000100,0x8000,0x40000000,0x40000000,0x40000000,0x800000,0x40000000,0x80000,0x40000000,0x40003000,0x3000,0x40000000,0x40000000,0x700,0x700,0x64000100,0x60000000,0x100,0x20000000,0x40000000,0x4000,0x10000000,0x60000000,0x80000,0x60000000,0x10000000,0x60000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public YalParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public YalParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public YalParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public YalParser(YalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(YalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
